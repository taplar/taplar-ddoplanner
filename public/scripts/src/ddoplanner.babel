;let DDOPlanner = ( ( $, window, document, undefined ) => {
	let instance;

	function buildApi () {
		let variables = {};

		let functions = {
			bindCreateANewBuild () {
				document.getElementById( 'copyright-notice-state' ).addEventListener( 'change', functions.createANewBuild );
			}
			, createANewBuild ( event ) {
				let div = document.createElement( 'div' );

				div.innerHTML = Templates.getInstance().buildTemplate( 'character-build-template', {
					menuOptions: [
						{ step: 'classes', description: 'Classes' }
						, { step: 'abilities', description: 'Abilities' }
						, { step: 'enhancements', description: 'Enhancements' }
						, { step: 'feats', description: 'Feats' }
						, { step: 'spells', description: 'Spells' }
						, { step: 'tomes', description: 'Tomes' }
						, { step: 'summary', description: 'Summary' }
					]
				} );

				variables.newBuild = div.children.item( 0 );

				document.getElementById( 'core-content' ).appendChild( variables.newBuild );
				variables.newBuild.getElementsByClassName( 'character-build-state' ).item( 0 ).checked = true;
			}
		};

		let api = {
			privateFunctions: functions
			, privateVariables: variables
			, initialize () {
				let initializationMethods = [
					'bindCreateANewBuild'
				];

				initializationMethods.forEach( ( method ) => {
					functions[ method ]();
					delete functions[ method ];
				} );

				delete api.initialize;
			}
		};

		return api;
	}

	return {
		getInstance () {
			if ( !instance ) {
				instance = buildApi();

				delete instance.privateFunctions;
				delete instance.privateVariables;
			}

			return instance;
		}
		, getTestInstance: buildApi
	};
} )( jQuery, window, document );

DDOPlanner.getInstance().initialize();
